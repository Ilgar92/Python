#Урок 4 (выполнение заданий)

""" Реализовать скрипт, в котором должна быть предусмотрена
функция расчета заработной платы сотрудника. В расчете необходимо
использовать формулу: (выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт
с параметрами.
"""

def sal():
    try:
        time = float(input("Выработка в часах: "))
        sal_per_hour = int(input("Ставка в час: "))
        bonus = int(input("Премия: "))
        res = time * sal_per_hour + bonus
        print(f"Заработная плата сотрудника {res}")
    except ValueError:
        return print('Не число')

sal()

#можно сохранить как отдельный модуль и запустить через новый благодаря import "название модуля" 



"""Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
"""

my_list = [10, 12, 6, 7, 5, 77, 56, 100, 99]
new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f'Исходный список {my_list}')
print(f"Новый список: {new_list}")



"""
Для чисел в пределах от 20 до 240 найти числа,
кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

print(f'Числа кратные 20 или 21 в пределах от 20 до 240 - {[el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]}')



""" Представлен список чисел. Определить элементы списка,
не имеющие повторений. Сформировать итоговый массив чисел,
соответствующих требованию. Элементы вывести
в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
"""

my_list = [10, 12, 6, 7, 5, 77, 56, 100, 99, 12, 56, 100, 6]
new_list = [el for el in my_list if my_list.count(el) < 2]
print(f'Исходный список {my_list}')
print(f"Новый список без повторений чисел: {new_list}")



"""
Реализовать формирование списка, используя
функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000
(включая границы). Необходимо получить результат
вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

from functools import reduce


def my_func(el_p, el):
    return el_p * el

print(f'Четные числа в промежутке от 100 до 1000: - {[el for el in range(99,1001) if el % 2 ==0]}')
print(f'Произведение всех элементов полученного списка: - {reduce(my_func, [el for el in range(99,1001) if el % 2 ==0])}')


"""
Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа,
начиная с указанного,
б) бесконечный итератор, повторяющий элементы
некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle()
модуля itertools.
"""

from itertools import count

for el in count(int(input('Введите стартовое число от 0 до 100: '))):
    if el > 150:
        break
    else:
        print(el)

from itertools import cycle

с = 0
for el in cycle("ABC, 123, True, None"):
    if с > 59:
        break
    print(el)
    с += 1

"""
Реализовать генератор с помощью функции с ключевым
словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор.
Функция должна вызываться следующим образом:
for el in fibo_gen().
Функция отвечает за получение факториала числа,
а в цикле необходимо выводить только первые 15 чисел.
Подсказка: факториал числа n — произведение
чисел от 1 до n. Например, факториал
четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""

from itertools import count
from math import factorial

def fibo_gen():
    for el in count(1):
        yield factorial(el)

gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break


























